// Generated by rstantools.  Do not edit by hand.

/*
    analysis2Dmito is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    analysis2Dmito is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with analysis2Dmito.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_bhlmm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 131> locations_array__ =
  {" (found before start of program)",
  " (in 'bhlmm', line 58, column 2 to column 23)",
  " (in 'bhlmm', line 59, column 2 to column 14)",
  " (in 'bhlmm', line 60, column 2 to column 25)",
  " (in 'bhlmm', line 61, column 2 to column 12)",
  " (in 'bhlmm', line 62, column 2 to column 12)",
  " (in 'bhlmm', line 63, column 2 to column 22)",
  " (in 'bhlmm', line 64, column 2 to column 22)",
  " (in 'bhlmm', line 65, column 2 to column 34)",
  " (in 'bhlmm', line 93, column 2 to column 23)",
  " (in 'bhlmm', line 94, column 2 to column 27)",
  " (in 'bhlmm', line 95, column 2 to column 22)",
  " (in 'bhlmm', line 96, column 2 to column 21)",
  " (in 'bhlmm', line 98, column 2 to column 38)",
  " (in 'bhlmm', line 99, column 2 to column 41)",
  " (in 'bhlmm', line 100, column 2 to column 32)",
  " (in 'bhlmm', line 101, column 2 to column 21)",
  " (in 'bhlmm', line 102, column 2 to column 14)",
  " (in 'bhlmm', line 103, column 2 to column 14)",
  " (in 'bhlmm', line 105, column 2 to column 20)",
  " (in 'bhlmm', line 106, column 2 to column 20)",
  " (in 'bhlmm', line 107, column 2 to column 31)",
  " (in 'bhlmm', line 108, column 2 to column 18)",
  " (in 'bhlmm', line 109, column 2 to column 18)",
  " (in 'bhlmm', line 110, column 2 to column 28)",
  " (in 'bhlmm', line 111, column 2 to column 28)",
  " (in 'bhlmm', line 112, column 2 to column 40)",
  " (in 'bhlmm', line 113, column 2 to column 27)",
  " (in 'bhlmm', line 114, column 2 to column 20)",
  " (in 'bhlmm', line 115, column 2 to column 20)",
  " (in 'bhlmm', line 117, column 2 to column 34)",
  " (in 'bhlmm', line 118, column 2 to column 44)",
  " (in 'bhlmm', line 119, column 2 to column 36)",
  " (in 'bhlmm', line 120, column 2 to column 34)",
  " (in 'bhlmm', line 122, column 4 to column 111)",
  " (in 'bhlmm', line 123, column 4 to column 106)",
  " (in 'bhlmm', line 124, column 4 to column 41)",
  " (in 'bhlmm', line 121, column 18 to line 125, column 3)",
  " (in 'bhlmm', line 121, column 2 to line 125, column 3)",
  " (in 'bhlmm', line 126, column 2 to column 35)",
  " (in 'bhlmm', line 128, column 2 to column 56)",
  " (in 'bhlmm', line 129, column 2 to column 56)",
  " (in 'bhlmm', line 130, column 2 to column 51)",
  " (in 'bhlmm', line 131, column 2 to column 51)",
  " (in 'bhlmm', line 133, column 4 to column 74)",
  " (in 'bhlmm', line 134, column 4 to column 61)",
  " (in 'bhlmm', line 132, column 17 to line 135, column 3)",
  " (in 'bhlmm', line 132, column 2 to line 135, column 3)",
  " (in 'bhlmm', line 136, column 2 to column 74)",
  " (in 'bhlmm', line 137, column 2 to column 61)",
  " (in 'bhlmm', line 138, column 2 to column 50)",
  " (in 'bhlmm', line 139, column 2 to column 45)",
  " (in 'bhlmm', line 141, column 2 to column 56)",
  " (in 'bhlmm', line 142, column 2 to column 43)",
  " (in 'bhlmm', line 145, column 4 to column 63)",
  " (in 'bhlmm', line 146, column 4 to column 89)",
  " (in 'bhlmm', line 144, column 18 to line 147, column 3)",
  " (in 'bhlmm', line 144, column 2 to line 147, column 3)",
  " (in 'bhlmm', line 68, column 2 to column 18)",
  " (in 'bhlmm', line 69, column 2 to column 17)",
  " (in 'bhlmm', line 70, column 2 to column 46)",
  " (in 'bhlmm', line 71, column 2 to column 46)",
  " (in 'bhlmm', line 72, column 2 to column 41)",
  " (in 'bhlmm', line 73, column 2 to column 41)",
  " (in 'bhlmm', line 75, column 4 to column 52)",
  " (in 'bhlmm', line 75, column 41 to column 49)",
  " (in 'bhlmm', line 76, column 4 to column 39)",
  " (in 'bhlmm', line 74, column 17 to line 77, column 3)",
  " (in 'bhlmm', line 74, column 2 to line 77, column 3)",
  " (in 'bhlmm', line 78, column 2 to column 35)",
  " (in 'bhlmm', line 79, column 2 to column 40)",
  " (in 'bhlmm', line 80, column 2 to column 32)",
  " (in 'bhlmm', line 81, column 2 to column 30)",
  " (in 'bhlmm', line 83, column 4 to column 102)",
  " (in 'bhlmm', line 82, column 19 to line 84, column 3)",
  " (in 'bhlmm', line 82, column 2 to line 84, column 3)",
  " (in 'bhlmm', line 86, column 4 to line 88, column 86)",
  " (in 'bhlmm', line 85, column 18 to line 89, column 3)",
  " (in 'bhlmm', line 85, column 2 to line 89, column 3)",
  " (in 'bhlmm', line 29, column 2 to column 8)",
  " (in 'bhlmm', line 30, column 2 to column 8)",
  " (in 'bhlmm', line 31, column 2 to column 8)",
  " (in 'bhlmm', line 32, column 2 to column 11)",
  " (in 'bhlmm', line 33, column 9 to column 13)",
  " (in 'bhlmm', line 33, column 2 to column 20)",
  " (in 'bhlmm', line 34, column 2 to column 17)",
  " (in 'bhlmm', line 35, column 2 to column 17)",
  " (in 'bhlmm', line 36, column 2 to column 26)",
  " (in 'bhlmm', line 37, column 2 to column 26)",
  " (in 'bhlmm', line 38, column 2 to column 28)",
  " (in 'bhlmm', line 39, column 2 to column 27)",
  " (in 'bhlmm', line 40, column 2 to column 28)",
  " (in 'bhlmm', line 41, column 2 to column 27)",
  " (in 'bhlmm', line 42, column 2 to column 26)",
  " (in 'bhlmm', line 43, column 2 to column 25)",
  " (in 'bhlmm', line 44, column 2 to column 16)",
  " (in 'bhlmm', line 45, column 2 to column 13)",
  " (in 'bhlmm', line 46, column 2 to column 13)",
  " (in 'bhlmm', line 49, column 2 to column 15)",
  " (in 'bhlmm', line 50, column 2 to column 21)",
  " (in 'bhlmm', line 51, column 2 to column 20)",
  " (in 'bhlmm', line 52, column 2 to column 20)",
  " (in 'bhlmm', line 53, column 9 to column 14)",
  " (in 'bhlmm', line 53, column 16 to column 17)",
  " (in 'bhlmm', line 53, column 2 to column 28)",
  " (in 'bhlmm', line 54, column 9 to column 13)",
  " (in 'bhlmm', line 54, column 15 to column 16)",
  " (in 'bhlmm', line 54, column 2 to column 26)",
  " (in 'bhlmm', line 55, column 34 to column 39)",
  " (in 'bhlmm', line 55, column 2 to column 41)",
  " (in 'bhlmm', line 58, column 18 to column 19)",
  " (in 'bhlmm', line 59, column 9 to column 10)",
  " (in 'bhlmm', line 98, column 32 to column 36)",
  " (in 'bhlmm', line 99, column 27 to column 31)",
  " (in 'bhlmm', line 100, column 18 to column 22)",
  " (in 'bhlmm', line 100, column 24 to column 25)",
  " (in 'bhlmm', line 101, column 9 to column 13)",
  " (in 'bhlmm', line 105, column 9 to column 10)",
  " (in 'bhlmm', line 106, column 9 to column 10)",
  " (in 'bhlmm', line 113, column 9 to column 13)",
  " (in 'bhlmm', line 14, column 4 to column 42)",
  " (in 'bhlmm', line 15, column 4 to column 52)",
  " (in 'bhlmm', line 17, column 4 to column 31)",
  " (in 'bhlmm', line 18, column 4 to column 13)",
  " (in 'bhlmm', line 13, column 50 to line 19, column 3)",
  " (in 'bhlmm', line 21, column 4 to column 32)",
  " (in 'bhlmm', line 23, column 6 to column 29)",
  " (in 'bhlmm', line 22, column 35 to line 24, column 5)",
  " (in 'bhlmm', line 22, column 4 to line 24, column 5)",
  " (in 'bhlmm', line 25, column 4 to column 18)",
  " (in 'bhlmm', line 20, column 52 to line 26, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
normal_lb_rng(const T0__& mu, const T1__& sigma, const T2__& lb, RNG&
              base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
beta_tr_rng(const T0__& a, const T1__& b, const T2__& lb, const T3__& ub,
            RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
normal_lb_rng(const T0__& mu, const T1__& sigma, const T2__& lb, RNG&
              base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ p_lb = DUMMY_VAR__;
    current_statement__ = 120;
    p_lb = stan::math::normal_cdf(lb, mu, sigma);
    local_scalar_t__ u = DUMMY_VAR__;
    current_statement__ = 121;
    u = (stan::math::logical_lt(p_lb, 1) ? stan::math::uniform_rng(p_lb, 1,
                                             base_rng__) : 1);
    local_scalar_t__ y = DUMMY_VAR__;
    current_statement__ = 122;
    y = (mu + (sigma * stan::math::Phi(u)));
    current_statement__ = 123;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
beta_tr_rng(const T0__& a, const T1__& b, const T2__& lb, const T3__& ub,
            RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ piStar = DUMMY_VAR__;
    current_statement__ = 125;
    piStar = stan::math::beta_rng(a, b, base_rng__);
    current_statement__ = 128;
    while ((stan::math::primitive_value(stan::math::logical_lt(piStar, lb))
           ||
           stan::math::primitive_value(stan::math::logical_gt(piStar, ub)))) {
      current_statement__ = 126;
      piStar = stan::math::beta_rng(a, b, base_rng__);
    }
    current_statement__ = 129;
    return piStar;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_bhlmm final : public model_base_crtp<model_bhlmm> {
private:
  int D;
  int K;
  int M;
  int nSyn;
  Eigen::Matrix<double,-1,1> xSyn_data__;
  double mean_mu_m;
  double mean_mu_c;
  double prec_mu_m;
  double prec_mu_c;
  double shape_tau_m;
  double rate_tau_m;
  double shape_tau_c;
  double rate_tau_c;
  double shape_tau;
  double rate_tau;
  double slope_lb;
  double pi_lb;
  double pi_ub;
  double tau_def;
  int nCtrl;
  int nPat;
  int nPts;
  Eigen::Matrix<double,-1,-1> ctrl_mat_data__;
  Eigen::Matrix<double,-1,-1> pat_mat_data__;
  std::vector<int> ctrlIndex;
  Eigen::Map<Eigen::Matrix<double,-1,1>> xSyn{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ctrl_mat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> pat_mat{nullptr, 0, 0};
public:
  ~model_bhlmm() {}
  model_bhlmm(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_bhlmm_namespace::model_bhlmm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 79;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 79;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 80;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 81;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 82;
      context__.validate_dims("data initialization", "nSyn", "int",
        std::vector<size_t>{});
      nSyn = std::numeric_limits<int>::min();
      current_statement__ = 82;
      nSyn = context__.vals_i("nSyn")[(1 - 1)];
      current_statement__ = 83;
      stan::math::validate_non_negative_index("xSyn", "nSyn", nSyn);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "xSyn", "double",
        std::vector<size_t>{static_cast<size_t>(nSyn)});
      xSyn_data__ = Eigen::Matrix<double,-1,1>::Constant(nSyn,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xSyn) Eigen::Map<Eigen::Matrix<double,-1,1>>(xSyn_data__.data(),
        nSyn);
      {
        std::vector<local_scalar_t__> xSyn_flat__;
        current_statement__ = 84;
        xSyn_flat__ = context__.vals_r("xSyn");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
          current_statement__ = 84;
          stan::model::assign(xSyn, xSyn_flat__[(pos__ - 1)],
            "assigning variable xSyn", stan::model::index_uni(sym1__));
          current_statement__ = 84;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 85;
      context__.validate_dims("data initialization", "mean_mu_m", "double",
        std::vector<size_t>{});
      mean_mu_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 85;
      mean_mu_m = context__.vals_r("mean_mu_m")[(1 - 1)];
      current_statement__ = 86;
      context__.validate_dims("data initialization", "mean_mu_c", "double",
        std::vector<size_t>{});
      mean_mu_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 86;
      mean_mu_c = context__.vals_r("mean_mu_c")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization", "prec_mu_m", "double",
        std::vector<size_t>{});
      prec_mu_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 87;
      prec_mu_m = context__.vals_r("prec_mu_m")[(1 - 1)];
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "prec_mu_m", prec_mu_m,
        0);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "prec_mu_c", "double",
        std::vector<size_t>{});
      prec_mu_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 88;
      prec_mu_c = context__.vals_r("prec_mu_c")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "prec_mu_c", prec_mu_c,
        0);
      current_statement__ = 89;
      context__.validate_dims("data initialization", "shape_tau_m", "double",
        std::vector<size_t>{});
      shape_tau_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 89;
      shape_tau_m = context__.vals_r("shape_tau_m")[(1 - 1)];
      current_statement__ = 89;
      stan::math::check_greater_or_equal(function__, "shape_tau_m",
        shape_tau_m, 0);
      current_statement__ = 90;
      context__.validate_dims("data initialization", "rate_tau_m", "double",
        std::vector<size_t>{});
      rate_tau_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 90;
      rate_tau_m = context__.vals_r("rate_tau_m")[(1 - 1)];
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "rate_tau_m",
        rate_tau_m, 0);
      current_statement__ = 91;
      context__.validate_dims("data initialization", "shape_tau_c", "double",
        std::vector<size_t>{});
      shape_tau_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 91;
      shape_tau_c = context__.vals_r("shape_tau_c")[(1 - 1)];
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "shape_tau_c",
        shape_tau_c, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "rate_tau_c", "double",
        std::vector<size_t>{});
      rate_tau_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 92;
      rate_tau_c = context__.vals_r("rate_tau_c")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "rate_tau_c",
        rate_tau_c, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "shape_tau", "double",
        std::vector<size_t>{});
      shape_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 93;
      shape_tau = context__.vals_r("shape_tau")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "shape_tau", shape_tau,
        0);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "rate_tau", "double",
        std::vector<size_t>{});
      rate_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 94;
      rate_tau = context__.vals_r("rate_tau")[(1 - 1)];
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "rate_tau", rate_tau, 0);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "slope_lb", "double",
        std::vector<size_t>{});
      slope_lb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 95;
      slope_lb = context__.vals_r("slope_lb")[(1 - 1)];
      current_statement__ = 96;
      context__.validate_dims("data initialization", "pi_lb", "double",
        std::vector<size_t>{});
      pi_lb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 96;
      pi_lb = context__.vals_r("pi_lb")[(1 - 1)];
      current_statement__ = 97;
      context__.validate_dims("data initialization", "pi_ub", "double",
        std::vector<size_t>{});
      pi_ub = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 97;
      pi_ub = context__.vals_r("pi_ub")[(1 - 1)];
      current_statement__ = 98;
      context__.validate_dims("data initialization", "tau_def", "double",
        std::vector<size_t>{});
      tau_def = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 98;
      tau_def = context__.vals_r("tau_def")[(1 - 1)];
      current_statement__ = 99;
      context__.validate_dims("data initialization", "nCtrl", "int",
        std::vector<size_t>{});
      nCtrl = std::numeric_limits<int>::min();
      current_statement__ = 99;
      nCtrl = context__.vals_i("nCtrl")[(1 - 1)];
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "nCtrl", nCtrl, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization", "nPat", "int",
        std::vector<size_t>{});
      nPat = std::numeric_limits<int>::min();
      current_statement__ = 100;
      nPat = context__.vals_i("nPat")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "nPat", nPat, 0);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "nPts", "int",
        std::vector<size_t>{});
      nPts = std::numeric_limits<int>::min();
      current_statement__ = 101;
      nPts = context__.vals_i("nPts")[(1 - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "nPts", nPts, 0);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("ctrl_mat", "nCtrl", nCtrl);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("ctrl_mat", "D", D);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "ctrl_mat", "double",
        std::vector<size_t>{static_cast<size_t>(nCtrl),
          static_cast<size_t>(D)});
      ctrl_mat_data__ = Eigen::Matrix<double,-1,-1>::Constant(nCtrl, D,
                          std::numeric_limits<double>::quiet_NaN());
      new (&ctrl_mat)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ctrl_mat_data__.data(),
        nCtrl, D);
      {
        std::vector<local_scalar_t__> ctrl_mat_flat__;
        current_statement__ = 104;
        ctrl_mat_flat__ = context__.vals_r("ctrl_mat");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= nCtrl; ++sym2__) {
            current_statement__ = 104;
            stan::model::assign(ctrl_mat, ctrl_mat_flat__[(pos__ - 1)],
              "assigning variable ctrl_mat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 104;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 105;
      stan::math::validate_non_negative_index("pat_mat", "nPat", nPat);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("pat_mat", "D", D);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "pat_mat", "double",
        std::vector<size_t>{static_cast<size_t>(nPat),
          static_cast<size_t>(D)});
      pat_mat_data__ = Eigen::Matrix<double,-1,-1>::Constant(nPat, D,
                         std::numeric_limits<double>::quiet_NaN());
      new (&pat_mat)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(pat_mat_data__.data(), nPat,
        D);
      {
        std::vector<local_scalar_t__> pat_mat_flat__;
        current_statement__ = 107;
        pat_mat_flat__ = context__.vals_r("pat_mat");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
            current_statement__ = 107;
            stan::model::assign(pat_mat, pat_mat_flat__[(pos__ - 1)],
              "assigning variable pat_mat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 107;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("ctrlIndex", "nCtrl", nCtrl);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "ctrlIndex", "int",
        std::vector<size_t>{static_cast<size_t>(nCtrl)});
      ctrlIndex = std::vector<int>(nCtrl, std::numeric_limits<int>::min());
      current_statement__ = 109;
      ctrlIndex = context__.vals_i("ctrlIndex");
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "ctrlIndex", ctrlIndex,
        1);
      current_statement__ = 109;
      stan::math::check_less_or_equal(function__, "ctrlIndex", ctrlIndex, M);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("m", "M", M);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("c", "M", M);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("classif", "nPat", nPat);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("probvec", "nPat", nPat);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("dens", "nPat", nPat);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("dens", "K", K);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("yPred", "nSyn", nSyn);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("m_prior", "M", M);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("c_prior", "M", M);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("yPred_prior", "nSyn", nSyn);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = M + M + 1 + 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_bhlmm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_bhlmm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 1;
      m = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 2;
      c = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      local_scalar_t__ tau_norm = DUMMY_VAR__;
      current_statement__ = 3;
      tau_norm = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ mu_m = DUMMY_VAR__;
      current_statement__ = 4;
      mu_m = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_c = DUMMY_VAR__;
      current_statement__ = 5;
      mu_c = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau_m = DUMMY_VAR__;
      current_statement__ = 6;
      tau_m = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ tau_c = DUMMY_VAR__;
      current_statement__ = 7;
      tau_c = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ probdiff = DUMMY_VAR__;
      current_statement__ = 8;
      probdiff = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      {
        local_scalar_t__ sigma_norm = DUMMY_VAR__;
        local_scalar_t__ sigma_def = DUMMY_VAR__;
        current_statement__ = 60;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_m, mean_mu_m, (1
                         / stan::math::sqrt(prec_mu_m))));
        current_statement__ = 61;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_c, mean_mu_c, (1
                         / stan::math::sqrt(prec_mu_c))));
        current_statement__ = 62;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_m, shape_tau_m,
                         rate_tau_m));
        current_statement__ = 63;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_c, shape_tau_c,
                         rate_tau_c));
        current_statement__ = 68;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 64;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(m, "m",
                             stan::model::index_uni(i)), mu_m, (1 /
                           stan::math::sqrt(tau_m))));
          current_statement__ = 65;
          if (stan::math::logical_lt(
                stan::model::rvalue(m, "m", stan::model::index_uni(i)),
                slope_lb)) {
            current_statement__ = 65;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 65;
            lp_accum__.add(-stan::math::normal_lccdf(slope_lb, mu_m, (1 /
                              stan::math::sqrt(tau_m))));
          }
          current_statement__ = 66;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(c, "c",
                             stan::model::index_uni(i)), mu_c, (1 /
                           stan::math::sqrt(tau_c))));
        }
        current_statement__ = 69;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(probdiff, pi_lb,
                         pi_ub));
        current_statement__ = 70;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_norm, shape_tau,
                         rate_tau));
        current_statement__ = 71;
        sigma_norm = (1 / stan::math::sqrt(tau_norm));
        current_statement__ = 72;
        sigma_def = (1 / stan::math::sqrt(tau_def));
        current_statement__ = 75;
        for (int i = 1; i <= nCtrl; ++i) {
          current_statement__ = 73;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(ctrl_mat, "ctrl_mat",
                             stan::model::index_uni(i),
                             stan::model::index_uni(2)),
                           ((stan::model::rvalue(m, "m",
                               stan::model::index_uni(
                                 stan::model::rvalue(ctrlIndex, "ctrlIndex",
                                   stan::model::index_uni(i)))) *
                           stan::model::rvalue(ctrl_mat, "ctrl_mat",
                             stan::model::index_uni(i),
                             stan::model::index_uni(1))) +
                           stan::model::rvalue(c, "c",
                             stan::model::index_uni(
                               stan::model::rvalue(ctrlIndex, "ctrlIndex",
                                 stan::model::index_uni(i))))), sigma_norm));
        }
        current_statement__ = 78;
        for (int j = 1; j <= nPat; ++j) {
          current_statement__ = 76;
          lp_accum__.add(stan::math::log_mix(probdiff,
                           stan::math::normal_lpdf<false>(
                             stan::model::rvalue(pat_mat, "pat_mat",
                               stan::model::index_uni(j),
                               stan::model::index_uni(2)),
                             ((stan::model::rvalue(m, "m",
                                 stan::model::index_uni(M)) *
                             stan::model::rvalue(pat_mat, "pat_mat",
                               stan::model::index_uni(j),
                               stan::model::index_uni(1))) +
                             stan::model::rvalue(c, "c",
                               stan::model::index_uni(M))), sigma_def),
                           stan::math::normal_lpdf<false>(
                             stan::model::rvalue(pat_mat, "pat_mat",
                               stan::model::index_uni(j),
                               stan::model::index_uni(2)),
                             ((stan::model::rvalue(m, "m",
                                 stan::model::index_uni(M)) *
                             stan::model::rvalue(pat_mat, "pat_mat",
                               stan::model::index_uni(j),
                               stan::model::index_uni(1))) +
                             stan::model::rvalue(c, "c",
                               stan::model::index_uni(M))), sigma_norm)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_bhlmm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> m =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      m = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<double,-1,1> c =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      c = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      double tau_norm = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      tau_norm = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double mu_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu_m = in__.template read<local_scalar_t__>();
      double mu_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_c = in__.template read<local_scalar_t__>();
      double tau_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      tau_m = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double tau_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      tau_c = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double probdiff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      probdiff = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      out__.write(m);
      out__.write(c);
      out__.write(tau_norm);
      out__.write(mu_m);
      out__.write(mu_c);
      out__.write(tau_m);
      out__.write(tau_c);
      out__.write(probdiff);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double log_probDef_tmp = std::numeric_limits<double>::quiet_NaN();
      double log_probHealthy_tmp = std::numeric_limits<double>::quiet_NaN();
      double sigma_norm_tmp = std::numeric_limits<double>::quiet_NaN();
      double sigma_def_tmp = std::numeric_limits<double>::quiet_NaN();
      std::vector<int> classif =
        std::vector<int>(nPat, std::numeric_limits<int>::min());
      Eigen::Matrix<double,-1,1> probvec =
        Eigen::Matrix<double,-1,1>::Constant(nPat,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> dens =
        Eigen::Matrix<double,-1,-1>::Constant(nPat, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> yPred =
        Eigen::Matrix<double,-1,1>::Constant(nSyn,
          std::numeric_limits<double>::quiet_NaN());
      double m_pred = std::numeric_limits<double>::quiet_NaN();
      double c_pred = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> m_prior =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> c_prior =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      double tau_norm_prior = std::numeric_limits<double>::quiet_NaN();
      double mu_m_prior = std::numeric_limits<double>::quiet_NaN();
      double mu_c_prior = std::numeric_limits<double>::quiet_NaN();
      double tau_m_prior = std::numeric_limits<double>::quiet_NaN();
      double tau_c_prior = std::numeric_limits<double>::quiet_NaN();
      double probdiff_prior = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> yPred_prior =
        Eigen::Matrix<double,-1,1>::Constant(nSyn,
          std::numeric_limits<double>::quiet_NaN());
      double m_pred_prior = std::numeric_limits<double>::quiet_NaN();
      double c_pred_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 30;
      log_probDef_tmp = stan::math::log(probdiff);
      current_statement__ = 31;
      log_probHealthy_tmp = stan::math::log((1 - probdiff));
      current_statement__ = 32;
      sigma_norm_tmp = (1 / stan::math::sqrt(tau_norm));
      current_statement__ = 33;
      sigma_def_tmp = (1 / stan::math::sqrt(tau_def));
      current_statement__ = 38;
      for (int j = 1; j <= nPat; ++j) {
        current_statement__ = 34;
        stan::model::assign(dens,
          stan::math::exp((log_probHealthy_tmp +
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(pat_mat, "pat_mat",
                stan::model::index_uni(j), stan::model::index_uni(2)),
              ((stan::model::rvalue(m, "m", stan::model::index_uni(M)) *
              stan::model::rvalue(pat_mat, "pat_mat",
                stan::model::index_uni(j), stan::model::index_uni(1))) +
              stan::model::rvalue(c, "c", stan::model::index_uni(M))),
              sigma_norm_tmp))), "assigning variable dens",
          stan::model::index_uni(j), stan::model::index_uni(1));
        current_statement__ = 35;
        stan::model::assign(dens,
          stan::math::exp((log_probDef_tmp +
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(pat_mat, "pat_mat",
                stan::model::index_uni(j), stan::model::index_uni(2)),
              ((stan::model::rvalue(m, "m", stan::model::index_uni(M)) *
              stan::model::rvalue(pat_mat, "pat_mat",
                stan::model::index_uni(j), stan::model::index_uni(1))) +
              stan::model::rvalue(c, "c", stan::model::index_uni(M))),
              sigma_def_tmp))), "assigning variable dens",
          stan::model::index_uni(j), stan::model::index_uni(2));
        current_statement__ = 36;
        stan::model::assign(probvec,
          (stan::model::rvalue(dens, "dens", stan::model::index_uni(j),
             stan::model::index_uni(2)) /
          stan::math::sum(
            stan::model::rvalue(dens, "dens", stan::model::index_uni(j),
              stan::model::index_omni()))), "assigning variable probvec",
          stan::model::index_uni(j));
      }
      current_statement__ = 39;
      stan::model::assign(classif,
        stan::math::bernoulli_rng(probvec, base_rng__),
        "assigning variable classif");
      current_statement__ = 40;
      mu_m_prior = stan::math::normal_rng(mean_mu_m, (1 /
                     stan::math::sqrt(prec_mu_m)), base_rng__);
      current_statement__ = 41;
      mu_c_prior = stan::math::normal_rng(mean_mu_c, (1 /
                     stan::math::sqrt(prec_mu_c)), base_rng__);
      current_statement__ = 42;
      tau_m_prior = stan::math::gamma_rng(shape_tau_m, rate_tau_m, base_rng__);
      current_statement__ = 43;
      tau_c_prior = stan::math::gamma_rng(shape_tau_c, rate_tau_c, base_rng__);
      current_statement__ = 47;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 44;
        stan::model::assign(m_prior,
          normal_lb_rng(mu_m_prior, (1 / stan::math::sqrt(tau_m_prior)),
            slope_lb, base_rng__, pstream__), "assigning variable m_prior",
          stan::model::index_uni(i));
        current_statement__ = 45;
        stan::model::assign(c_prior,
          stan::math::normal_rng(mu_c_prior, (1 /
            stan::math::sqrt(tau_c_prior)), base_rng__),
          "assigning variable c_prior", stan::model::index_uni(i));
      }
      current_statement__ = 48;
      m_pred_prior = normal_lb_rng(mu_m_prior, (1 /
                       stan::math::sqrt(tau_m_prior)), slope_lb, base_rng__,
                       pstream__);
      current_statement__ = 49;
      c_pred_prior = stan::math::normal_rng(mu_c_prior, (1 /
                       stan::math::sqrt(tau_c_prior)), base_rng__);
      current_statement__ = 50;
      tau_norm_prior = stan::math::gamma_rng(shape_tau, rate_tau, base_rng__);
      current_statement__ = 51;
      probdiff_prior = stan::math::uniform_rng(pi_lb, pi_ub, base_rng__);
      current_statement__ = 52;
      m_pred = normal_lb_rng(mu_m, (1 / stan::math::sqrt(tau_m)), slope_lb,
                 base_rng__, pstream__);
      current_statement__ = 53;
      c_pred = stan::math::normal_rng(mu_c, (1 / stan::math::sqrt(tau_c)),
                 base_rng__);
      current_statement__ = 57;
      for (int k = 1; k <= nSyn; ++k) {
        current_statement__ = 54;
        stan::model::assign(yPred,
          stan::math::normal_rng(
            ((stan::model::rvalue(m, "m", stan::model::index_uni(M)) *
            stan::model::rvalue(xSyn, "xSyn", stan::model::index_uni(k))) +
            stan::model::rvalue(c, "c", stan::model::index_uni(M))),
            sigma_norm_tmp, base_rng__), "assigning variable yPred",
          stan::model::index_uni(k));
        current_statement__ = 55;
        stan::model::assign(yPred_prior,
          stan::math::normal_rng(
            ((stan::model::rvalue(m_prior, "m_prior",
                stan::model::index_uni(M)) *
            stan::model::rvalue(xSyn, "xSyn", stan::model::index_uni(k))) +
            stan::model::rvalue(c_prior, "c_prior", stan::model::index_uni(M))),
            (1 / stan::math::sqrt(tau_norm_prior)), base_rng__),
          "assigning variable yPred_prior", stan::model::index_uni(k));
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "classif", classif, 0);
      current_statement__ = 13;
      stan::math::check_less_or_equal(function__, "classif", classif, 1);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "probvec", probvec, 0);
      current_statement__ = 14;
      stan::math::check_less_or_equal(function__, "probvec", probvec, 1);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "dens", dens, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "tau_norm_prior",
        tau_norm_prior, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "tau_m_prior",
        tau_m_prior, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "tau_c_prior",
        tau_c_prior, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "probdiff_prior",
        probdiff_prior, 0);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "probdiff_prior",
        probdiff_prior, 1);
      out__.write(log_probDef_tmp);
      out__.write(log_probHealthy_tmp);
      out__.write(sigma_norm_tmp);
      out__.write(sigma_def_tmp);
      out__.write(classif);
      out__.write(probvec);
      out__.write(dens);
      out__.write(yPred);
      out__.write(m_pred);
      out__.write(c_pred);
      out__.write(m_prior);
      out__.write(c_prior);
      out__.write(tau_norm_prior);
      out__.write(mu_m_prior);
      out__.write(mu_c_prior);
      out__.write(tau_m_prior);
      out__.write(tau_c_prior);
      out__.write(probdiff_prior);
      out__.write(yPred_prior);
      out__.write(m_pred_prior);
      out__.write(c_pred_prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(m,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable m");
      out__.write_free_lb(0, m);
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(c,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable c");
      out__.write(c);
      local_scalar_t__ tau_norm = DUMMY_VAR__;
      current_statement__ = 3;
      tau_norm = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_norm);
      local_scalar_t__ mu_m = DUMMY_VAR__;
      current_statement__ = 4;
      mu_m = in__.read<local_scalar_t__>();
      out__.write(mu_m);
      local_scalar_t__ mu_c = DUMMY_VAR__;
      current_statement__ = 5;
      mu_c = in__.read<local_scalar_t__>();
      out__.write(mu_c);
      local_scalar_t__ tau_m = DUMMY_VAR__;
      current_statement__ = 6;
      tau_m = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_m);
      local_scalar_t__ tau_c = DUMMY_VAR__;
      current_statement__ = 7;
      tau_c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_c);
      local_scalar_t__ probdiff = DUMMY_VAR__;
      current_statement__ = 8;
      probdiff = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, probdiff);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "m", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau_norm",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mu_m", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_c", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "tau_m", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "tau_c", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "probdiff",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 1;
        m_flat__ = context__.vals_r("m");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(m, m_flat__[(pos__ - 1)],
            "assigning variable m", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, m);
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> c_flat__;
        current_statement__ = 2;
        c_flat__ = context__.vals_r("c");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(c, c_flat__[(pos__ - 1)],
            "assigning variable c", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(c);
      local_scalar_t__ tau_norm = DUMMY_VAR__;
      current_statement__ = 3;
      tau_norm = context__.vals_r("tau_norm")[(1 - 1)];
      out__.write_free_lb(0, tau_norm);
      local_scalar_t__ mu_m = DUMMY_VAR__;
      current_statement__ = 4;
      mu_m = context__.vals_r("mu_m")[(1 - 1)];
      out__.write(mu_m);
      local_scalar_t__ mu_c = DUMMY_VAR__;
      current_statement__ = 5;
      mu_c = context__.vals_r("mu_c")[(1 - 1)];
      out__.write(mu_c);
      local_scalar_t__ tau_m = DUMMY_VAR__;
      current_statement__ = 6;
      tau_m = context__.vals_r("tau_m")[(1 - 1)];
      out__.write_free_lb(0, tau_m);
      local_scalar_t__ tau_c = DUMMY_VAR__;
      current_statement__ = 7;
      tau_c = context__.vals_r("tau_c")[(1 - 1)];
      out__.write_free_lb(0, tau_c);
      local_scalar_t__ probdiff = DUMMY_VAR__;
      current_statement__ = 8;
      probdiff = context__.vals_r("probdiff")[(1 - 1)];
      out__.write_free_lub(0, 1, probdiff);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"m", "c", "tau_norm", "mu_m", "mu_c",
                "tau_m", "tau_c", "probdiff"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_probDef_tmp", "log_probHealthy_tmp", "sigma_norm_tmp",
             "sigma_def_tmp", "classif", "probvec", "dens", "yPred",
             "m_pred", "c_pred", "m_prior", "c_prior", "tau_norm_prior",
             "mu_m_prior", "mu_c_prior", "tau_m_prior", "tau_c_prior",
             "probdiff_prior", "yPred_prior", "m_pred_prior", "c_pred_prior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(nPat)},
             std::vector<size_t>{static_cast<size_t>(nPat)},
             std::vector<size_t>{static_cast<size_t>(nPat),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(nSyn)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(nSyn)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "m" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "c" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_norm");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_c");
    param_names__.emplace_back(std::string() + "tau_m");
    param_names__.emplace_back(std::string() + "tau_c");
    param_names__.emplace_back(std::string() + "probdiff");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_probDef_tmp");
      param_names__.emplace_back(std::string() + "log_probHealthy_tmp");
      param_names__.emplace_back(std::string() + "sigma_norm_tmp");
      param_names__.emplace_back(std::string() + "sigma_def_tmp");
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        param_names__.emplace_back(std::string() + "classif" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        param_names__.emplace_back(std::string() + "probvec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
          param_names__.emplace_back(std::string() + "dens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        param_names__.emplace_back(std::string() + "yPred" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "m_pred");
      param_names__.emplace_back(std::string() + "c_pred");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "m_prior" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "c_prior" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau_norm_prior");
      param_names__.emplace_back(std::string() + "mu_m_prior");
      param_names__.emplace_back(std::string() + "mu_c_prior");
      param_names__.emplace_back(std::string() + "tau_m_prior");
      param_names__.emplace_back(std::string() + "tau_c_prior");
      param_names__.emplace_back(std::string() + "probdiff_prior");
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        param_names__.emplace_back(std::string() + "yPred_prior" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "m_pred_prior");
      param_names__.emplace_back(std::string() + "c_pred_prior");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "m" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "c" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_norm");
    param_names__.emplace_back(std::string() + "mu_m");
    param_names__.emplace_back(std::string() + "mu_c");
    param_names__.emplace_back(std::string() + "tau_m");
    param_names__.emplace_back(std::string() + "tau_c");
    param_names__.emplace_back(std::string() + "probdiff");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_probDef_tmp");
      param_names__.emplace_back(std::string() + "log_probHealthy_tmp");
      param_names__.emplace_back(std::string() + "sigma_norm_tmp");
      param_names__.emplace_back(std::string() + "sigma_def_tmp");
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        param_names__.emplace_back(std::string() + "classif" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nPat; ++sym1__) {
        param_names__.emplace_back(std::string() + "probvec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nPat; ++sym2__) {
          param_names__.emplace_back(std::string() + "dens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        param_names__.emplace_back(std::string() + "yPred" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "m_pred");
      param_names__.emplace_back(std::string() + "c_pred");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "m_prior" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "c_prior" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau_norm_prior");
      param_names__.emplace_back(std::string() + "mu_m_prior");
      param_names__.emplace_back(std::string() + "mu_c_prior");
      param_names__.emplace_back(std::string() + "tau_m_prior");
      param_names__.emplace_back(std::string() + "tau_c_prior");
      param_names__.emplace_back(std::string() + "probdiff_prior");
      for (int sym1__ = 1; sym1__ <= nSyn; ++sym1__) {
        param_names__.emplace_back(std::string() + "yPred_prior" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "m_pred_prior");
      param_names__.emplace_back(std::string() + "c_pred_prior");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tau_norm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probdiff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_probDef_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_probHealthy_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_norm_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_def_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"classif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nPat) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"probvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nPat) + "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nPat) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSyn) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"c_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"tau_norm_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"probdiff_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yPred_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSyn) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tau_norm\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"probdiff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_probDef_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_probHealthy_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_norm_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_def_tmp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"classif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nPat) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"probvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nPat) + "},\"block\":\"generated_quantities\"},{\"name\":\"dens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nPat) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSyn) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"c_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"tau_norm_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_m_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_c_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"probdiff_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yPred_prior\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nSyn) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"c_pred_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((M + M) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((((((((((((((((1 + 1) + 1) + 1) + nPat) + nPat) + (nPat * K)) +
      nSyn) + 1) + 1) + M) + M) + 1) + 1) + 1) + 1) + 1) + 1) + nSyn) + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((M + M) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((((((((((((((((1 + 1) + 1) + 1) + nPat) + nPat) + (nPat * K)) +
      nSyn) + 1) + 1) + M) + M) + 1) + 1) + 1) + 1) + 1) + 1) + nSyn) + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_bhlmm_namespace::model_bhlmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bhlmm_namespace::profiles__;
}
#endif
#endif
