}
stopCluster(cl)
cl  = makeCluster(ncores)
{
output = parLapply(cl,
data_list,
analysis2Dmito::stan_inference,
chains=chains,
iter=iter,
warmup=warmup
)
}
tt = stan_inferece(data_list[[1]])
tt = stan_inference(data_list[[1]])
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
tt
# --- The following definitions are the default of the stan_inference function,
# --- but they are needed to be able to check chain convergence post inference
chains = 4
iter = 200
warmup = 100
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
#' tau_var = 10
#' rate_tau = 0.5 * (tau_mode + sqrt(tau_mode ^ 2 + 4 * tau_var)) / tau_var
#' shape_tau = 1 + tau_mode * rate_tau
#'
#' infOut = analysis2Dmito::stan_inference(data_mat, parameterVals=list(shape_tau=shape_tau, rate_tau=rate_tau))
#'
#'
#' @importFrom rstan sampling
#'
#' @export
stan_inference = function(dataMats,
parameterVals=NULL,
save=FALSE,
saveOnly=FALSE,
saveRoot="",
chains=1,
iter=12000,
warmup=10000,
...){
nCtrl = nrow( dataMats$ctrl )
ctrl_mat = dataMats$ctrl
ctrl_index = dataMats$indexCtrl
nPat = nrow( dataMats$pts )
nCrl = length( unique( dataMats$indexCtrl) )
nSyn = 1e3
xSyn = seq(min(c(dataMats$ctrl[,1], dataMats$pts[,1]))-2,
max(c(dataMats$ctrl[,1], dataMats$pts[,1]))+2,
length.out=nSyn)
grad = vector("numeric", length=nCrl)
inter = grad
prec = grad
for( i in 1:nCrl ){
xCtrl = ctrl_mat[ctrl_index==i, 1]
yCtrl = ctrl_mat[ctrl_index==i, 2]
dd = data.frame(mitochan=xCtrl, chan=yCtrl)
mod = lm(chan ~ mitochan, data=dd)
grad[i] = mod$coefficients[2]
inter[i] = mod$coefficients[1]
prec[i] = 1 / summary(mod)$sigma^2
}
tau_mode = mean( prec )
tau_var = 10
rate_tau = 0.5*(tau_mode + sqrt(tau_mode^2+4*tau_var)) / tau_var
shape_tau = 1 + tau_mode*rate_tau
tau_m_mode = 50
tau_m_var = 50
rate_tau_m = 0.5*(tau_m_mode + sqrt(tau_m_mode^2+4*tau_m_var)) / tau_m_var
shape_tau_m = 1 + tau_m_mode*rate_tau_m
tau_c_mode = 50
tau_c_var = 50
rate_tau_c = 0.5*(tau_c_mode + sqrt(tau_c_mode^2+4*tau_c_var)) / tau_c_var
shape_tau_c = 1 + tau_c_mode*rate_tau_c
param_list = list(
D=2,
K=2,
M=nCrl+1,
ctrl_mat = dataMats$ctrl,
pat_mat = dataMats$pts,
nCtrl = nCtrl,
nCrl = nCrl,
nPat = nPat,
nPts = 1,
ctrlIndex = dataMats$indexCtrl,
nSyn = nSyn,
xSyn = xSyn,
mean_mu_m = mean( grad ), prec_mu_m = 1/0.25^2,
mean_mu_c = mean( inter ), prec_mu_c = 1/0.25^2,
shape_tau_m = shape_tau_m, rate_tau_m = rate_tau_m,
shape_tau_c = shape_tau_c, rate_tau_c = rate_tau_c,
shape_tau = shape_tau, rate_tau = rate_tau,
alpha_pi = 1.0, beta_pi = 1.0,
slope_lb = 0.1,
tau_def=1e-2
)
if (!is.null(parameterVals) && is.list(parameterVals)) {
for (param in names(parameterVals) ) {
if (param %in% names(param_list) ) {
param_list[[param]] = parameterVals[[param]]
} else {
message(paste("The parameter `", param, "` is not part of the model."))
}
}
}
output = rstan::sampling(stanmodels$bhlmm,
data=param_list,
chains=chains,
iter=iter,
warmup=warmup,
...)
outmat = as.matrix(output)
outcols = colnames(outmat)
classifs_mat = outmat[, grepl("classif", outcols)]
post = outmat[, !( grepl("classif", outcols)|grepl("lp__", outcols)|
grepl("probvec", outcols)|grepl("dens", outcols)|
grepl("yPred", outcols)|grepl("_tmp", outcols)|
grepl("_prior", outcols) ) ]
postpred_mat = outmat[, grepl("yPred", outcols) & !grepl("_prior", outcols)]
prior = outmat[, !( grepl("classif", outcols)|grepl("lp__", outcols)|
grepl("probvec", outcols)|grepl("dens", outcols)|
grepl("yPred", outcols)|grepl("_tmp", outcols) ) & grepl("_prior", outcols) ]
colnames(prior) = gsub("_prior", "", colnames(prior))
priorpred_mat = outmat[, grepl("yPred", outcols) & grepl("_prior", outcols)]
if( chains==1 ){
postpred = apply(postpred_mat, 2, quantile, probs=c(0.025, 0.5, 0.975))
postpred = cbind(xSyn, t(postpred))
colnames(postpred) = c("mitochan", "lwrNorm", "medNorm", "uprNorm")
priorpred = apply(priorpred_mat, 2, quantile, probs=c(0.025, 0.5, 0.975))
priorpred = cbind(xSyn, t(priorpred))
colnames(priorpred) = c("mitochan", "lwrNorm", "medNorm", "uprNorm")
} else {
postpred = NULL
priorpred = NULL
for( i in 1:chains ){
chain_ind = ((i - 1)*MCMCout + 1):(i*MCMCout)
postpred_chain = apply(postpred_mat[chain_ind, ], 2, quantile, probs=c(0.025, 0.5, 0.975))
priorpred_chain = apply(priorpred_mat[chain_ind, ], 2, quantile, probs=c(0.025, 0.5, 0.975))
postpred = rbind(postpred, t(postpred_chain))
priorpred = rbind(priorpred, t(priorpred_chain))
}
postpred = cbind(rep(xSyn, chains), postpred)
priorpred = cbind(rep(xSyn, chains), priorpred)
colnames(postpred) = c("mitochan", "lwrNorm", "medNorm", "uprNorm")
colnames(priorpred) = c("mitochan", "lwrNorm", "medNorm", "uprNorm")
}
outList = list(POST=post, POSTPRED=postpred, CLASSIF=classifs_mat,
PRIOR=prior, PRIORPRED=priorpred)
if( saveOnly ){
list_saver(outList, root = saveRoot)
return( NULL )
}
if( save ) list_saver(outList, root=saveRoot)
return( outList )
}
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
roxygenize()
library("roxygen")
library("roxygen2")
roxygenize()
example(source)
try( roxygenize(load_code=sourceDir), silent=TRUE)
roxygenize()
# --- READ THIS ---
# It is advised that before using `analysis2Dmito` package for analysis you read
# the README file available on the GitHub page.
# This is example uses the dataset from the paper; A stagewise response to
# mitochondrial dysfunction in mitochondrial DNA maintenance disorders by
# Vincent et al. (https://www.biorxiv.org/content/10.1101/2023.10.24.563545v1).
# The dataset itself is available to download through
# this package with the function `get_exampleData`.
#
# The example data is already in the format that is required for use in the
# package, see GitHub (https://github.com/jordanbchilds/analysis2Dmito) for more
# details. The measure of mitochondrial mass is manually set, as this varies
# between datasets and cannot be generalised, the remaining channels present in
# the dataset are assumed to be OXPHOS protein measurements on which we wish to
# fit the model. The mitochondrial mass protein channel is the first thing to be
# defined in the script.
#
# If something in this script produces an error check lines which are commented
# out with a single '#', it could that a required package is not installed.
# Lines commented out with a '# ---' are comments to guide you.
# --- measure of mitochondrial mass (x-axis in 2Dmito)
mitochan = "VDAC"
# --- install and load dependencies
# install.packages(c("data.table", "dplyr", "readr", "tidyr", "rjags"))
library("data.table")
library("dplyr")
library("readr")
library("tidyr")
library("rstan")
library("parallel")
# install.packages("devtools")
library("devtools")
# --- install analysis2Dmito from GitHub (https://github.com/jordanbchilds/analysis2Dmito)
devtools::install_github("jordanbchilds/analysis2Dmito")
library("analysis2Dmito")
# --- load example data
data_raw = analysis2Dmito::get_exampleData()
# --- transform expression values
data = data_raw
data$value = log( data_raw$value ) # log-transform data
# --- find control and patient subject IDs
sbj = unique(data$sampleID)
ctrlIDs = grep("C", sbj, value=TRUE)
pts = sort( sbj[!(sbj %in% ctrlIDs)] )
# --- all channels present in the data, including mitochondrial mass measure
channels_all = unique(data$channel)
# --- channels of interest (y-axis in 2Dmito) i.e. any channel which is not the
# --- measure of mitochondrial mass
channels = channels_all[channels_all != mitochan]
# --- create a list of datasets to be passed to the inference function
data_list = list()
for (chan in channels) {
for (pat in pts) {
root = paste(chan, pat, sep = "_")
data_list[[root]] = analysis2Dmito::getData_mats(
data,
pts = pat,
channels = c(mitochan, chan),
ctrlID = ctrlIDs)
}
}
# --------------------- #
# --- RUN INFERENCE --- #
# --------------------- #
# --- The inference is split across half the number of available coreson your
# --- machine. If your machine is starts to crash this can be changed to a lower
# --- number.
# ncores = 1
ncores = floor( detectCores() / 2 )
# --- The following definitions are the default of the stan_inference function,
# --- but they are needed to be able to check chain convergence post inference
chains = 4
iter = 200
warmup = 100
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
stopCluster(cl)
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
data_list[[1]]
tt = stan_inference(data_list[[1]], chains=chains, iter=iter, warmup=warmup)
cl  = makeCluster(ncores)
{
output = parLapply(cl,
data_list,
analysis2Dmito::stan_inference,
chains=chains,
iter=iter,
warmup=warmup
)
}
cl  = makeCluster(ncores)
{
output = parLapply(cl,
data_list,
analysis2Dmito::stan_inference,
chains=chains,
iter=iter,
warmup=warmup
)
}
example(source)
try( roxygenize(load_code=sourceDir), silent=TRUE)
roxygenize()
rm(list=c("stan_inference"))
example(source)
?roxygenize
try( roxygenize(load_code=sourceDir), silent=TRUE)
example(source)
try( roxygenize( load_code=sourceDir), silent=TRUE)
setwd("~/Documents/GitHub/analysis2Dmito")
example(source)
try( roxygenize( load_code=sourceDir), silent=TRUE)
pnorm(1.25)
?pnorm
pnorm(1.0)
qnorm(0.0)
pnorm(0.0)
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
library(macrtools)
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
# run the next line if you already have rstan installed
# remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
?save_list
?list_saver
?t.test
sessionInfo()
## Update R
Before continuing it is suggested that R is updated, this is imported to be able
list.files()
file.edit("R/list_saver.R")
For Mac a C toolchain can be created using the macrtools package, a guidline for
list.files
list.files()
list.files("R")
list.files()
file.edit("example_analysis.R")
class("hello")
class(c(1,2,3))
class(TRUE)
class(NA)
class(NULL)
list.files()
list.files("inst")
list.files("inst/stan")
edit.file("inst/stan/bhlmm.stan")
file.edit("inst/stan/bhlmm.stan")
library("installr")
?updateR
