% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stan_inference.R
\name{stan_inference}
\alias{stan_inference}
\title{Bayesian Inference for a Hierarchical Linear Mixture Model with a Bernoulli Classifier}
\usage{
stan_inference(
  dataMats,
  parameterVals = NULL,
  save = FALSE,
  saveOnly = FALSE,
  saveRoot = "",
  chains = 1,
  iter = 22000,
  warmup = 20000,
  ...
)
}
\arguments{
\item{dataMats}{A list consisting of four elements. The list should be named
or the elements should be in the following order.
- ctrl : a matrix of the control subject data.
- pts : a matrix of the patient subject data.
- indexCtrl : a numeric vector indicating which rows of the control subject matrix belong to the same subject.
- indexPat : a numeric vector indicating which rows of the patient subject matrix belong to the same subject.}

\item{parameterVals}{A list of named values to replace the parameter values used to define prior distributions.}

\item{save}{A boolean, indicating whether to save the output. Default FALSE.}

\item{saveOnly}{A boolean, if TRUE the output is saved and the function returns NULL. Default FALSE.}

\item{saveRoot}{A string, the file path root of the saved files. The default is "".}

\item{iter}{The final number of posterior draws including warmup and thinning,
the argmuent is passed directly to the \code{rstan::sampling} function. The default is 22000.}

\item{warmup}{The number of posterior draws discarded for burn-in. This is passed
directly to the \link[rstan:stanmodel-method-sampling]{rstan::sampling} function. The default is 20,000.}

\item{...}{Extra parameters to be passed to the \link[rstan:stanmodel-method-sampling]{rstan::sampling} function.}
}
\value{
A list of different components of the MCMC output:
\itemize{
\item POST : a data frame of the posterior draws for all variables, where each column is a different variable
\item PRIOR : a data frame of draws from the prior distribution for all variables.
\item POSTPRED : a data frame of posterior predictions for the patient subject linear model, with a column for x values and columns for 95\% predictive interval and expected values for both the like control and not control models.
\item PRIORPRED : a data frame of prior predictions for the patient subject model, similar to postpred.
\item CLASSIF : a data frame of whose columns correspond to patient fibres and rows are classifications from individual draws from the posterior distirbution
}
}
\description{
Using \link{rstan} the function fits a hierarchical linear mixture model to a
dataset. The model was developed to be able to classify individual fibres from a
patient dataset as being healthy or deficient based on a dataset of healthy
control fibres. It is assumed that healthy data shows strong
linearity and anything that diverges from this is deficient. Individual fibres are
classified with a Bernoulli classifier whose parameter is the proportion of
deficient fibres within the sample. The parameters and hyper-parameters of
prior distributions can be changed to account for different prior beliefs. See
details for more a list of parameters whose value can be changed.
}
\details{
The inference is implemented using \link[rstan:stanmodel-method-sampling]{rstan::sampling}. The model itself
cannot be changed however the parameters and hyper parameters which govern
the model can be updated by using the \code{parameterVals} argument in the
function. This allows for a vast array of different prior beliefs and
information to be imposed upon the model, which may change the resulting
classification and posterior parameter beliefs.

Beliefs about the slope are summarised using a normal distribution, however
the parameters of this normal distribution, mu_m and tau_m, are unknown and
so we impart beliefs about the slope by our choice of priors on mu_m and
tau_m. The prior densities for the two parameters are normal and gamma
distributions respectively. In the model the hyper-parameters which define
these distributions are:
\itemize{
\item mean_mu_m : the expected value of mu_m
\item prec_mu_m : the precision of mu_m
\item shape_mu_m : the shape parameter of the tau_m distribution
\item rate_mu_m : the rate parameter of the tau_m gamma distribution
}

Similarly, the intercept is summarised by a normal distribution whose
parameters are not known and follow normal and gamma distributions a priori.
\itemize{
\item mean_mu_c : the expected value of mu_c
\item prec_mu_c : the precision of mu_c
\item shape_mu_c : the shape parameter of the tau_c distribution
\item rate_mu_c : the rate parameter of the tau_c gamma distribution
}

The model error for healthy patients is considered unknown and follows a
gamma distribution a priori.
\itemize{
\item shape_tau : the shape parameter for tau
\item rate_tau : the rate parameter for tau
}

The error for the second component, which classifies deficient fibres, is
fixed.
\itemize{
\item tau_def : the precision of the second component
}

The proportion of deficiency follows a beta distribution, with two shape
parameters.
\itemize{
\item alpha_pi : the first shape parameter
\item beta_pi : the second shape parameter
}

The default values of the parameters mean_mu_c and mean_mu_m depend on the
data which is passed to the function, the default values for the rest of the
parameters are const scalars. More information about this can be found in
LINK TO PAPER. Any subset of these parameters can be changed for
inference by storing their value in a list and passing it to \code{parameterVals}.
If nothing is passed to \code{parameterVals} the model uses the default
parameters, which may in inappropriate for your data set.
}
\examples{
exampleData = get_exampleData()
# DEFINE MITO MASS - the x-axis of the 2Dmito plot
mitochan = "VDAC"
channelsAll = unique(exampleData[,"channel"]) # all channels present in the data
channels = channelsAll[ channelsAll!=mitochan ] # all channels excpet mitochan present in the data
sbj = unique(exampleData$sampleID) # all subject IDs present in the data
ctrlID = grep("C", sbj, value=TRUE) # all control subject IDs (those which begin with "C")
pts = grep("C", sbj, value=TRUE, invert=TRUE) # patient subject IDs are all those which are not the controls

chan = channels[1]
pat = pts[1]

data_mat = analysis2Dmito::getData_mats(exampleData, channels=c(mitochan, chan), ctrlID=ctrlID, pts=pat)

tau_mode = 50 # choose tau's mode apriori
tau_var = 10 # choose tau's variance apriori
# from these two quantities calculate the shape and rate
rate_tau = 0.5 * (tau_mode + sqrt(tau_mode ^ 2 + 4 * tau_var)) / tau_var
shape_tau = 1 + tau_mode * rate_tau

# pass parameter values to the `stan_inference` function
infOut = analysis2Dmito::stan_inference(data_mat,
                                        parameterVals=list(shape_tau=shape_tau,
                                                           rate_tau=rate_tau))


}
